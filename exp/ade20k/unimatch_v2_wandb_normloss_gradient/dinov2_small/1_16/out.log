/home/macula/SMATousi/.conda/envs/snorkel/lib/python3.12/site-packages/torch/distributed/launch.py:208: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use-env is set by default in torchrun.
If your script expects `--local-rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  main()
2025-01-24 11:38:28.539145: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-01-24 11:38:28.547094: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
2025-01-24 11:38:28.555503: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
2025-01-24 11:38:28.557978: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2025-01-24 11:38:28.564645: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-01-24 11:38:31.636234: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
/home/macula/SMATousi/.conda/envs/snorkel/lib/python3.12/site-packages/xformers/ops/fmha/flash.py:211: FutureWarning: `torch.library.impl_abstract` was renamed to `torch.library.register_fake`. Please use that instead; we will remove `torch.library.impl_abstract` in a future version of PyTorch.
  @torch.library.impl_abstract("xformers_flash::flash_fwd")
/home/macula/SMATousi/.conda/envs/snorkel/lib/python3.12/site-packages/xformers/ops/fmha/flash.py:344: FutureWarning: `torch.library.impl_abstract` was renamed to `torch.library.register_fake`. Please use that instead; we will remove `torch.library.impl_abstract` in a future version of PyTorch.
  @torch.library.impl_abstract("xformers_flash::flash_bwd")
[2025-01-24 11:38:41,139][    INFO] {'backbone': 'dinov2_small',
 'batch_size': 2,
 'conf_thresh': 0.95,
 'config': 'configs/ade20k.yaml',
 'criterion': {'kwargs': {'ignore_index': 255}, 'name': 'CELoss'},
 'crop_size': 518,
 'data_root': '/home/macula/SMATousi/projects/Unimatch+RAE/datasets/ADE20K/data',
 'dataset': 'ade20k',
 'epochs': 60,
 'labeled_id_path': 'splits/ade20k/1_16/labeled.txt',
 'local_rank': 0,
 'lock_backbone': False,
 'lr': 5e-06,
 'lr_multi': 40.0,
 'model': 'dpt',
 'nclass': 150,
 'ngpus': 1,
 'port': 8080,
 'projectname': 'Unimatch_RAE',
 'runname': 'pascal_wo_FA_366_norm',
 'save_path': 'exp/ade20k/unimatch_v2_wandb_normloss_gradient/dinov2_small/1_16',
 'unlabeled_id_path': 'splits/ade20k/1_16/unlabeled.txt'}

wandb: Using wandb-core as the SDK backend. Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: stmmc (tousi-team). Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.18.5
wandb: Run data is saved locally in /home/macula/SMATousi/projects/Unimatch+RAE/UniMatch-V2/wandb/run-20250124_113841-zltd0epn
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run pascal_wo_FA_366_norm
wandb: ⭐️ View project at https://wandb.ai/tousi-team/Unimatch_RAE
wandb: 🚀 View run at https://wandb.ai/tousi-team/Unimatch_RAE/runs/zltd0epn
/home/macula/SMATousi/projects/Unimatch+RAE/UniMatch-V2/unimatch_v2_wandb_normloss_gradient.py:90: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(f'./pretrained/{cfg["backbone"]}.pth')
[2025-01-24 11:38:45,001][    INFO] Total params: 24.8M
[2025-01-24 11:38:45,001][    INFO] Encoder params: 22.1M
[2025-01-24 11:38:45,001][    INFO] Decoder params: 2.7M

[2025-01-24 11:38:45,084][    INFO] ===========> Epoch: 0, Previous best: 0.00 @epoch-0, EMA: 0.00 @epoch-0
[2025-01-24 11:38:50,244][    INFO] Iters: 0, LR: 0.0000050, Total loss: 1.248, Loss x: 4.984, Loss s: 0.000, Mask ratio: 0.000
